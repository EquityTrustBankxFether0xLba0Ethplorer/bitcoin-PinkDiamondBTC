~/.../bitcoin-PinkDiamondBTC/sats $ bench_bitcoin pyperf system tune                                                  Warning, results might be unstable:

* CPU frequency scaling enabled: CPU 0 between 546.0 and 2,002.0 MHz

* CPU governor is 'energy_step' but should be 'performance'

* Turbo is enabled, CPU frequency will fluctuate

Recommendations                                            * Use 'pyperf system tune' before benchmarking. See https://github.com/vstinner/pyperf                                

|               ns/op |                op/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------                                        |      608,214,499.00 |                1.64 |    0.8% |      6.68 | `AddrManAdd`                                      |        8,332,192.00 |              120.02 |    4.5% |      0.09 | `AddrManGetAddr`                                  mkdir github.com/vstinner/pyperf

|    5,429,484,573.00 |                0.18 |    2.0% |     26.97 | `AddrManGood`

|            3,659.60 |          273,253.91 |    6.9% |      0.00 | :wavy_dash: `AddrManSelect` (Unstable with ~22.2 iters. Increase `minEpochIterations` to e.g. 222)

|        5,518,423.00 |              181.21 |    1.2% |      0.06 | `AssembleBlock`

|             ns/byte |              byte/s |    err% |     total | benchmark                                         |--------------------:|--------------------:|--------:|----------:|:----------

|              508.90 |        1,965,022.60 |    0.3% |      0.00 | `Base58CheckEncode`

|              141.40 |        7,072,011.91 |    0.5% |      0.00 | `Base58Decode`

|              279.93 |        3,572,345.58 |    0.2% |      0.00 | `Base58Encode`

|               55.23 |       18,104,629.48 |    0.2% |      0.00 | `Bech32Decode`

|              125.12 |        7,992,307.40 |    0.2% |      0.00 | `Bech32Encode`

                                                           |               ns/op |                op/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------                                        |              939.68 |        1,064,190.01 |    8.0% |      0.00 | :wavy_dash: `BenchLockedPool` (Unstable with ~89.1 iters. Increase `minEpochIterations` to e.g. 891)

|              103.25 |        9,685,080.28 |    0.0% |      0.00 | `BenchTimeDeprecated`                             |              815.52 |        1,226,208.30 |    0.1% |      0.00 | `BenchTimeMillis`                                 |              803.46 |        1,244,619.02 |    0.2% |      0.00 | `BenchTimeMillisSys`                              |                9.47 |      105,578,892.46 |    0.0% |      0.00 | `BenchTimeMock`                                   |      807,708,538.00 |                1.24 |    0.7% |      8.94 | `BlockToJsonVerbose`                              |        6,596,000.00 |              151.61 |    0.5% |      0.07 | `BnBExhaustion`                                   

|              ns/job |               job/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|            2,263.44 |          441,804.70 |    7.7% |      0.08 | :wavy_dash: `CCheckQueueSpeedPrevectorJob` (Unstable with ~10.9 iters. Increase `minEpochIterations` to e.g. 109)

|               ns/op |                op/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|            3,181.96 |          314,271.55 |    0.3% |      0.00 | `CCoinsCaching`

                                                           |             ns/byte |              byte/s |    err% |     total | benchmark                                         |--------------------:|--------------------:|--------:|----------:|:----------

|                6.44 |      155,335,755.71 |    0.1% |      0.07 | `CHACHA20_1MB`

|                6.49 |      154,073,931.41 |    0.0% |      0.00 | `CHACHA20_256BYTES`

|                6.93 |      144,381,528.19 |    0.0% |      0.00 | `CHACHA20_64BYTES`

|               19.48 |       51,324,049.83 |    0.1% |      0.22 | `CHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT`

|                9.93 |      100,744,881.62 |    0.7% |      0.11 | `CHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT`

|               28.51 |       35,077,703.05 |    0.6% |      0.00 | `CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT` |               14.22 |       70,332,305.16 |    0.1% |      0.00 | `CHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT`

|               55.26 |       18,095,542.50 |    0.2% |      0.00 | `CHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT`

|               27.72 |       36,074,066.97 |    0.4% |      0.00 | `CHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT`

                                                           |               ns/op |                op/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|        2,960,423.00 |              337.79 |    3.8% |      0.03 | `CoinSelection`

|    1,987,304,767.00 |                0.50 |    2.3% |     22.68 | `ComplexMemPool`                                  

|             ns/elem |              elem/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|            1,096.21 |          912,235.88 |    2.3% |      0.12 | `ConstructGCSFilter`                              

|            ns/block |             block/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------                                        |       77,815,000.00 |               12.85 |    1.8% |      0.86 | `DeserializeAndCheckBlockTest`

|       56,584,154.00 |               17.67 |    1.3% |      0.63 | `DeserializeBlockTest`                            

|               ns/op |                op/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|       59,120,654.00 |               16.91 |    2.9% |      0.66 | `DuplicateInputs`

|               16.97 |       58,940,359.98 |    0.1% |      0.00 | `FastRandom_1bit`

|               50.83 |       19,672,955.97 |    0.2% |      0.00 | `FastRandom_32bit`

                                                           |             ns/byte |              byte/s |    err% |     total | benchmark                                         |--------------------:|--------------------:|--------:|----------:|:----------

|               32.58 |       30,690,558.94 |    0.5% |      0.38 | `HASH_1MB`

|               49.60 |       20,159,596.81 |    0.2% |      0.00 | `HASH_256BYTES`

|              102.31 |        9,773,852.40 |    0.2% |      0.00 | `HASH_64BYTES`

|             ns/elem |              elem/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|          245,307.00 |            4,076.52 |    0.6% |      0.00 | `MatchGCSFilter`

|               ns/op |                op/s |    err% |     total | benchmark                                         |--------------------:|--------------------:|--------:|----------:|:----------

|          265,884.00 |            3,761.04 |    1.3% |      0.00 | `MempoolEviction`

|             ns/leaf |              leaf/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|            5,392.07 |          185,457.62 |    0.7% |      0.53 | `MerkleRoot`

|             ns/byte |              byte/s |    err% |     total | benchmark                                         |--------------------:|--------------------:|--------:|----------:|:----------

|                3.17 |      315,084,213.19 |    0.3% |      0.04 | `POLY1305_1MB`

|                3.40 |      294,512,999.99 |    0.0% |      0.00 | `POLY1305_256BYTES`

|                4.23 |      236,360,716.89 |    0.0% |      0.00 | `POLY1305_64BYTES`

|               ns/op |                op/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|            2,251.06 |          444,236.04 |    0.1% |      0.00 | `PrePadded`

|              127.24 |        7,859,323.06 |    0.0% |      0.00 | `PrevectorClearNontrivial`

|              135.88 |        7,359,494.77 |    0.1% |      0.00 | `PrevectorClearTrivial`                           |            2,385.39 |          419,219.54 |    1.2% |      0.03 | `PrevectorDeserializeNontrivial`

|              176.15 |        5,676,850.94 |    1.0% |      0.00 | `PrevectorDeserializeTrivial`

|              195.07 |        5,126,433.45 |    1.1% |      0.00 | `PrevectorDestructorNontrivial`

|              187.97 |        5,320,127.00 |    0.7% |      0.00 | `PrevectorDestructorTrivial`

|               63.64 |       15,714,599.45 |    0.1% |      0.00 | `PrevectorResizeNontrivial`

|               67.43 |       14,831,109.04 |    0.0% |      0.00 | `PrevectorResizeTrivial`                          

|             ns/byte |              byte/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|               43.06 |       23,225,981.53 |    0.6% |      0.47 | `RIPEMD160`

|               ns/op |                op/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|            4,359.60 |          229,378.84 |    0.1% |      0.00 | `RegularPadded`                                   |            6,038.47 |          165,604.95 |    1.6% |      0.00 | `RollingBloom`

|          209,039.00 |            4,783.80 |    0.1% |      0.00 | `RollingBloomReset`

|       99,276,077.00 |               10.07 |    1.7% |      1.09 | `RpcMempool`

|             ns/byte |              byte/s |    err% |     total | benchmark                                         |--------------------:|--------------------:|--------:|----------:|:----------

|                6.55 |      152,619,771.80 |    0.2% |      0.07 | `SHA1`

|               32.38 |       30,880,840.78 |    0.1% |      0.36 | `SHA256`

|               81.32 |       12,296,750.68 |    0.5% |      0.06 | `SHA256D64_1024`

|               69.68 |       14,351,515.15 |    0.0% |      0.00 | `SHA256_32b`                                      |               11.32 |       88,356,636.37 |    0.3% |      0.12 | `SHA3_256_1M`                                     |               21.39 |       46,760,823.95 |    0.2% |      0.24 | `SHA512`                                          

|               ns/op |                op/s |    err% |     total | benchmark

|--------------------:|--------------------:|--------:|----------:|:----------

|               82.11 |       12,178,681.08 |    0.0% |      0.00 | `SipHash_32b`

|               58.08 |       17,217,920
.49 |    0.0% |      0.00 | `Trig`

|          889,154.00 |            1,124.66 |    3.3% |      0.01 | `VerifyNestedIfScript`

|          551,269.00 |            1,814.00 |    6.2% |      0.01 | :wavy_dash: `VerifyScriptBench` (Unstable with ~1.0 iters. Increase `minEpochIterations` to e.g. 10)

|          322,115.00 |            3,104.48 |    4.5% |      0.00 | `WalletBalanceClean`                              |        3,415,000.00 |              292.83 |    2.4% |      0.04 | `WalletBalanceDirty`

|          150,461.00 |            6,646.24 |    0.9% |      0.00 | `WalletBalanceMine`

|          314,846.00 |            3,176.16 |    3.7% |      0.00 | `WalletBalanceWatch`
